name: CI - Docker Build, Push and Deploy

on:
  push:
    branches: ['**']  # Triggers on push to any branch
  pull_request:
    branches: [ '**' ]  # Triggers on PRs targeting any branch

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set lowercase repository name
        run: echo "REPO_LOW=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ env.REPO_LOW }}:${{ github.ref_name }}
            ghcr.io/${{ env.REPO_LOW }}:sha-${{ github.sha }}
            ghcr.io/${{ env.REPO_LOW }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Verify Image Push
        if: github.event_name == 'push'
        run: |
          echo "‚úÖ Image build and push completed successfully!"
          echo "Tagged as: ghcr.io/${{ env.REPO_LOW }}:latest"

      # Deploy to AWS EC2 on any branch push
      - name: Deploy to AWS EC2
        if: github.event_name == 'push'
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          REPO_LOW: ${{ env.REPO_LOW }}
          IMAGE_TAG: sha-${{ github.sha }}
        run: |
          # Save SSH key to file
          echo "$EC2_SSH_KEY" > ec2_key.pem
          chmod 600 ec2_key.pem
          
          # Create .ssh directory if it doesn't exist
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Add EC2 host to known_hosts to avoid prompt
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts 2>/dev/null
          
          # SSH into EC2 and deploy
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST bash << ENDSSH
            set -e
            echo "üöÄ Deploying to EC2..."
            echo "üì¶ Image tag: $IMAGE_TAG"
            
            # Login to GitHub Container Registry
            echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GITHUB_ACTOR" --password-stdin
            
            # Pull the specific SHA-tagged image
            echo "Pulling image: ghcr.io/$REPO_LOW:$IMAGE_TAG"
            docker pull ghcr.io/$REPO_LOW:$IMAGE_TAG
            
            # Stop and remove old container
            echo "Stopping old container..."
            docker stop bus-tracking-app 2>/dev/null || true
            docker rm bus-tracking-app 2>/dev/null || true
            
            # Create .env file on EC2 if it doesn't exist
            if [ ! -f /home/ubuntu/ntc-app/.env ]; then
              echo "‚ö†Ô∏è  Warning: /home/ubuntu/ntc-app/.env not found!"
              echo "Please create it with required environment variables."
            fi
            
            # Run the new container with the SHA-tagged image
            echo "Starting new container with image: ghcr.io/$REPO_LOW:$IMAGE_TAG"
            docker run -d \
              --name bus-tracking-app \
              --restart unless-stopped \
              -p 3000:3000 \
              --env-file /home/ubuntu/ntc-app/.env \
              -v /home/ubuntu/ntc-app/logs:/usr/src/app/logs \
              ghcr.io/$REPO_LOW:$IMAGE_TAG
            
            # Wait for container to start
            sleep 5
            
            # Check if container is running
            if docker ps | grep -q bus-tracking-app; then
              echo "‚úÖ Container is running!"
              docker ps | grep bus-tracking-app
            else
              echo "‚ùå Container failed to start!"
              docker logs bus-tracking-app
              exit 1
            fi
            
            # Clean up old images (keeps last 3)
            echo "Cleaning up old images..."
            docker images ghcr.io/$REPO_LOW --format "{{.ID}} {{.CreatedAt}}" | tail -n +4 | awk '{print \$1}' | xargs -r docker rmi 2>/dev/null || true
            
            echo "‚úÖ Deployment completed successfully!"
            echo "üìå Deployed version: $IMAGE_TAG"
          ENDSSH
          
          # Clean up SSH key
          rm -f ec2_key.pem

      - name: Build Summary
        if: always()
        run: |
          echo "## Build Results üê≥" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "  - \`ghcr.io/${{ env.REPO_LOW }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "  - \`ghcr.io/${{ env.REPO_LOW }}:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "  - \`ghcr.io/${{ env.REPO_LOW }}:sha-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "- **Deployed to EC2:** ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "- **Deployed Version:** \`sha-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Docker build, push, or deployment failed! Check logs above."